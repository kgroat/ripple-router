import { type Component, effect, untrack } from 'ripple'
import { RouterMap } from './routing'
import { RouteContext } from './context'

export component Router (props: {
  $routes: {
    [routeStr: `/${string}`]: {
      component: Component;
      exact?: boolean;
    }
  }
  $404: Component;
}) {
  const $compiledRoutes = RouterMap.from(props.$routes);
  let $match = untrack(() => $compiledRoutes).getMatch(window.location.pathname);

  const $setPath = (path: string) => {
    const currentMatch = $match;
    window.history.pushState({}, '', path);
    $routeDetails.$path = window.location.pathname;
    $match = $compiledRoutes.getMatch($routeDetails.$path);
    if ($match?.$component !== currentMatch?.$component) {
      $renderHack = !$renderHack;
    }
  }

  let $renderHack = false;

  const $routeDetails = {
    $path: window.location.pathname,
    $params: $match?.$params ?? {},
    $goTo: $setPath,
  };

  RouteContext.set($routeDetails);

  if ($match && $renderHack) {
    const FoundComponent = $match.$component;
    <FoundComponent $params={$match.$params} />
  } else if ($match) {
    const FoundComponent = $match.$component;
    <FoundComponent $params={$match.$params} />
  } else {
    <props.$404 $route={$routeDetails.$path} />
  }
}
