import { effect, untrack } from 'ripple'
import { RouterMap, RouterProps } from './routing'
import { RouteContext } from './context'

export component Router (props: RouterProps) {
  const $compiledRoutes = RouterMap.from(props.$routes, props.$basePath);
  let $match = untrack(() => $compiledRoutes).getMatch(window.location.pathname);

  const $setPath = (path: string) => {
    const currentMatch = $match;
    window.history.pushState({}, '', path);
    $routeDetails.$path = window.location.pathname;
    $match = $compiledRoutes.getMatch($routeDetails.$path);
    if ($match?.$component !== currentMatch?.$component) {
      $renderHack = !$renderHack;
    }
  }

  let $renderHack = false;

  let contextValue: RouteContextType | null;
  try {
    contextValue = RouteContext.get();
  } catch {
    contextValue = null;
  }

  if (contextValue) {
    effect(() => {
      const currentMatch = $match;
      $match = $compiledRoutes.getMatch($routeDetails.$path);
      if ($match?.$component !== currentMatch?.$component) {
        $renderHack = !$renderHack;
      }
    })
  }

  const $routeDetails = contextValue ?? {
    $path: window.location.pathname,
    $params: $match?.$params ?? {},
    $goTo: $setPath,
  };

  if (!RouteContext.get()) {
    RouteContext.set($routeDetails);
  }

  if ($match && $renderHack) {
    const FoundComponent = $match.$component;
    <FoundComponent $params={$match.$params}>
      if (Object.keys($match.$subRoutes).length) {
        <Router $routes={$match.$subRoutes} $404={$match.$notFound} $basePath={$match.$path} />
      }
    </FoundComponent>
  } else if ($match) {
    const FoundComponent = $match.$component;
    <FoundComponent $params={$match.$params}>
      if (Object.keys($match.$subRoutes).length) {
        <Router $routes={$match.$subRoutes} $404={$match.$notFound} $basePath={$match.$path} />
      }
    </FoundComponent>
  } else {
    const NotFoundComponent = props.$404;
    <NotFoundComponent $route={$routeDetails.$path} />
  }
}
